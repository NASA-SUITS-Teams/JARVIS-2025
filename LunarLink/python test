import socket
import struct
import time

# TSS Server details
UDP_IP = "127.0.0.1"
UDP_PORT = 14141

# Function to send a request and receive response
def request_data(command_number):
    # Create a UDP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    # Get the current UNIX timestamp (4-byte big-endian)
    timestamp = int(time.time())  # Convert to uint32
    request_message = struct.pack(">II", timestamp, command_number)  # Pack as big-endian

    try:
        # Send the request
        sock.sendto(request_message, (UDP_IP, UDP_PORT))
        
        # Receive the response (typically 12 bytes)
        data, _ = sock.recvfrom(1024)  # Buffer size 1024 bytes
        
        # Unpack response (Timestamp, Command Number, Output Data)
        received_timestamp, received_command, output_data = struct.unpack(">IIf", data)
        #lidar_data = struct.unpack(">II13f", data)
        print(f"Response from TSS:")
        print(f"  Timestamp: {received_timestamp}")
        print(f"  Command: {received_command}")
        print(f"  Output Data: {output_data}")

    except Exception as e:
        print(f"Error: {e}")
    
    finally:
        sock.close()

# COMMAND_LIDAR = 167

# def get_lidar_data():
#     # Create a UDP socket
#     sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
#     try:
#         # Get the current UNIX timestamp (4-byte uint32)
#         timestamp = int(time.time())

#         # Pack the request in big-endian format (">" = big-endian, "II" = two uint32s)
#         request_data = struct.pack(">II", timestamp, COMMAND_LIDAR)
        
#         # Send the request to the server
#         sock.sendto(request_data, (UDP_IP, UDP_PORT))
        
#         response, _ = sock.recvfrom(60) 
#         print(f"Received {len(response)} bytes: {response}")

#         received_timestamp, received_command, *lidar_values = struct.unpack(">II13f", response)

#         # Verify the command number
#         if received_command != COMMAND_LIDAR:
#             raise ValueError(f"Unexpected command number: {received_command}")
        
#         return lidar_values  # List of 13 float distances
    
#     finally:
#         # don't remove or everything explodes
#         sock.close()

# lidar_data = get_lidar_data()
# print("LIDAR Data:", lidar_data)

while True:
    request_data(23)
    time.sleep(2)
# ###why is my timestamp always 5 seconds ahead what :(
